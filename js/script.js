/**************************************************************************
 * @file script.js
 * @description Gestion principale du jeu (initialisation, √©v√©nements, logs)
 * @author Trackozor
 * @version 1.0
 **************************************************************************/

// ‚úÖ Importation des fonctions n√©cessaires
import { startGame } from "./functions/start-game.js";
import { logEvent } from "./utils/utils.js";

/**************************************************************************
 *                      S√âLECTION DES √âL√âMENTS HTML
 **************************************************************************/

export const gameContainer = document.getElementById("game-container");
export const canvas = document.getElementById("gameCanvas");

// ‚úÖ V√©rification du canvas et du contexte 2D
export let ctx = null;

if (!canvas) {
    logEvent("error", "‚ùå L'√©l√©ment #gameCanvas est introuvable !");
} else {
    ctx = canvas.getContext("2d");
    logEvent("success", "‚úÖ Canvas d√©tect√© et contexte 2D r√©cup√©r√©.");
}

/**************************************************************************
 *                      VARIABLES GLOBALES DU JEU
 **************************************************************************/

export let gameRunning = false;
export let player = { x: 50, y: 200, width: 30, height: 30, dy: 0 };
export let gravity = 0.5;
export let obstacles = [];
export let score = 0;
export let secretCode = "";

/**************************************************************************
 *                      INITIALISATION DU JEU
 **************************************************************************/

/**
 * @function initGame
 * @description Initialise les √©v√©nements et v√©rifie les d√©pendances.
 */
export function initGame() {
    try {
        logEvent("info", "üîÑ Initialisation du jeu...");
        resetGameData();
        initKeyboardEvents();
        logEvent("success", "üéÆ Jeu pr√™t √† √™tre lanc√© !");
    } catch (error) {
        logEvent("error", `Erreur lors de l'initialisation du jeu: ${error.message}`);
    }
}

/**************************************************************************
 *                      R√âINITIALISATION DU JEU
 **************************************************************************/

/**
 * @function resetGameData
 * @description R√©initialise les variables du jeu.
 */
function resetGameData() {
    logEvent("info", "üîÑ R√©initialisation des donn√©es du jeu...");
    gameRunning = false;
    score = 0;
    obstacles = [];
    player = { x: 50, y: 200, width: 30, height: 30, dy: 0 };
}

/**************************************************************************
 *                      GESTION DES √âV√âNEMENTS CLAVIER
 **************************************************************************/

/**
 * @function initKeyboardEvents
 * @description Initialise les √©couteurs d'√©v√©nements clavier.
 */
function initKeyboardEvents() {
    try {
        document.addEventListener("keydown", handleKeyDown);
        logEvent("success", "üéπ Gestionnaire d'√©v√©nements clavier activ√©.");
    } catch (error) {
        logEvent("error", "Erreur lors de l'ajout des √©v√©nements clavier.", { error });
    }
}

/**
 * @function handleKeyDown
 * @description G√®re les entr√©es clavier du joueur.
 * @param {KeyboardEvent} e - √âv√©nement de touche enfonc√©e.
 */
function handleKeyDown(e) {
    logEvent("info", `Touche press√©e: ${e.code}`);

    if (e.code === "Space" && gameRunning) {
        player.dy = -7; // Saut du joueur
        logEvent("success", "üïπÔ∏è Le joueur saute !");
    }

    // Ajout du code secret pour d√©bloquer le jeu
    secretCode += e.key.toLowerCase();
    logEvent("info", `Code secret en cours : ${secretCode}`);

    if (secretCode.endsWith("play")) {
        logEvent("success", "üéÆ Code secret activ√©, relance du jeu !");
        startGame();
        secretCode = ""; // R√©initialisation
    }
}

/**************************************************************************
 *                      V√âRIFICATION DES D√âPENDANCES
 **************************************************************************/

/**
 * @function checkGameDependencies
 * @description V√©rifie la pr√©sence des √©l√©ments et des fonctions n√©cessaires au jeu.
 */
function checkGameDependencies() {
    try {
        if (!canvas || !ctx) {
            throw new Error("Le canvas ou son contexte est introuvable.");
        }
        logEvent("success", "‚úÖ Canvas et contexte d√©tect√©s.");
    } catch (error) {
        logEvent("error", `V√©rification √©chou√©e: ${error.message}`);
    }
}

/**************************************************************************
 *                      D√âMARRAGE AUTOMATIQUE DU JEU
 **************************************************************************/

logEvent("success", "‚úÖ Script charg√© avec succ√®s !");
initGame();
